{"version":3,"file":"static/js/731.edc60ab6.chunk.js","mappings":"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","sources":["components/MovieDetails/Cast/Cast.styled.js","components/MovieDetails/Cast/Cast.jsx","components/Notification/Notification.jsx","components/Notification/Notification.styled.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  gap: 20px;\n  grid-template-columns: repeat(auto-fill, minmax(185px, 1fr));\n`;\n\nexport const CastItem = styled.li`\n  padding-bottom: 16px;\n  text-align: center;\n  background-color: rgb(238, 238, 238);\n  border: 1px solid rgb(204, 204, 204);\n  border-radius: 6px;\n  overflow: hidden;\n`;\n\nexport const CastImage = styled.img`\n  display: block;\n  margin-bottom: 16px;\n  background-color: rgb(255, 255, 255);\n  object-fit: cover;\n`;\n\nexport const ActorName = styled.p`\n  margin-bottom: 8px;\n  font-size: 20px;\n  font-weight: 600;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notification } from 'components/Notification/Notification';\nimport noPhoto from 'images/no-photo.png';\nimport { ActorName, CastImage, CastItem, CastList } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castData, setCastData] = useState([]);\n  const [status, setStatus] = useState('pending');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      try {\n        const res = await fetchCast(movieId, controller);\n        setCastData(res);\n        setStatus('resolved');\n      } catch (error) {\n        console.error(error.message);\n        setStatus('rejected');\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  if (status === 'pending') return <Loader />;\n\n  if (status === 'rejected')\n    return <Notification message=\"Ooops, something went wrong\" />;\n\n  if (status === 'resolved' && castData.length === 0)\n    return <p>We don't have any cast information for this movie</p>;\n\n  if (status === 'resolved')\n    return (\n      <CastList>\n        {castData.map(({ id, profile_path, name, character }) => {\n          const photo = `https://image.tmdb.org/t/p/w500${profile_path}`;\n\n          return (\n            <CastItem key={id}>\n              <CastImage src={profile_path ? photo : noPhoto} alt={name} />\n              <ActorName>{name}</ActorName>\n              <p>\n                {character\n                  ? `Character: ${character}`\n                  : `Character is not specified`}\n              </p>\n            </CastItem>\n          );\n        })}\n      </CastList>\n    );\n};\nexport default Cast;\n","import PropTypes from 'prop-types';\nimport { Message, NotificationText } from './Notification.styled';\nimport notFound from 'images/notFound.jpg';\n\nexport const Notification = ({ message }) => {\n  return (\n    <Message>\n      <img src={notFound} alt=\"not found\" width=\"280px\" />\n      <NotificationText>{message}</NotificationText>\n    </Message>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const NotificationText = styled.p`\n  padding: 32px 0px;\n  font-size: 26px;\n  font-weight: 600;\n  text-align: center;\n  color: #777;\n`;\n","import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '76d635679cabf189c0749ed5946c0835';\n\nexport async function fetchTrending(controller) {\n  const url = `${API_BASE_URL}/trending/movie/day`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovies(searchQuery, controller) {\n  const url = `${API_BASE_URL}/search/movie`;\n  const urlParams = {\n    api_key: API_KEY,\n    query: searchQuery,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data;\n}\n\nexport async function fetchCast(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/credits`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.cast;\n}\n\nexport async function fetchReviews(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/reviews`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n"],"names":["CastList","styled","CastItem","CastImage","ActorName","movieId","useParams","useState","castData","setCastData","status","setStatus","useEffect","controller","AbortController","fetchCast","res","console","error","message","abort","Loader","Notification","length","map","id","profile_path","name","character","photo","src","noPhoto","alt","notFound","width","Message","NotificationText","API_BASE_URL","API_KEY","fetchTrending","url","urlParams","api_key","axios","params","signal","response","data","results","fetchMovies","searchQuery","query","fetchMovieDetails","cast","fetchReviews"],"sourceRoot":""}