{"version":3,"file":"static/js/415.339f2ac4.chunk.js","mappings":"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","sources":["components/MoviesList/MovieLink/MovieLink.jsx","components/MoviesList/MoviesList.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/Shared/Section.styled.js","pages/Home.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport noPoster from '../../../images/no-poster.jpg';\n\nexport const MovieLink = ({ movieId, posterPath, title }) => {\n  const location = useLocation();\n  const movieLink = `/movies/${movieId}`;\n  const poster = `https://image.tmdb.org/t/p/w500${posterPath}`;\n\n  return (\n    <li>\n      <Link to={movieLink} state={{ from: location }}>\n        <img\n          src={posterPath ? poster : noPoster}\n          alt={title}\n          width={230}\n          height={345}\n        />\n        {title}\n      </Link>\n    </li>\n  );\n};\n\nMovieLink.propTypes = {\n  movieId: PropTypes.number.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { MovieLink } from './MovieLink/MovieLink';\n\nexport const MoviesList = ({ moviesData }) => {\n  return (\n    <ul>\n      {moviesData.map(({ id, original_title, poster_path }) => (\n        <MovieLink\n          key={id}\n          movieId={id}\n          posterPath={poster_path}\n          title={original_title}\n        />\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  moviesData: PropTypes.array.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Text = styled.p`\n  font-size: 26px;\n  font-weight: 600;\n  text-align: center;\n  color: #777;\n`;\n","import PropTypes from 'prop-types';\nimport { Message, Text } from './Notification.styled';\nimport notFound from '../../images/notFound.jpg';\n\nexport const Notification = ({ message }) => {\n  return (\n    <Message>\n      <img src={notFound} alt=\"not found\" width=\"280px\" />\n      <Text>{message}</Text>\n    </Message>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  width: 100%;\n  padding: 16px 0px;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchTrending } from 'services/api';\nimport { Section } from 'components/Shared/Section.styled';\nimport { Container } from 'components/Shared/Container.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notification } from 'components/Notification/Notification';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('pending');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      try {\n        const res = await fetchTrending(controller);\n        setMovies(res);\n        setStatus('resolved');\n      } catch (error) {\n        console.error(error.message);\n        setStatus('rejected');\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return (\n    <Section>\n      <Container>\n        <h2>Trending today</h2>\n        {status === 'pending' && <Loader />}\n        {status === 'rejected' && (\n          <Notification message=\"Ooops, something went wrong\" />\n        )}\n        {status === 'resolved' && <MoviesList moviesData={movies} />}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '76d635679cabf189c0749ed5946c0835';\n\nexport async function fetchTrending(controller) {\n  const url = `${API_BASE_URL}/trending/movie/day`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovies(searchQuery, controller) {\n  const url = `${API_BASE_URL}/search/movie`;\n  const urlParams = {\n    api_key: API_KEY,\n    query: searchQuery,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data;\n}\n\nexport async function fetchCast(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/credits`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.cast;\n}\n\nexport async function fetchReviews(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/reviews`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n"],"names":["MovieLink","movieId","posterPath","title","location","useLocation","movieLink","poster","to","state","from","src","noPoster","alt","width","height","MoviesList","moviesData","map","id","original_title","poster_path","Message","styled","Text","Notification","message","notFound","Section","useState","movies","setMovies","status","setStatus","useEffect","controller","AbortController","fetchTrending","res","console","error","abort","API_BASE_URL","API_KEY","url","urlParams","api_key","axios","params","signal","response","data","results","fetchMovies","searchQuery","query","fetchMovieDetails","fetchCast","cast","fetchReviews"],"sourceRoot":""}