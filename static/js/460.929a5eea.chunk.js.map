{"version":3,"file":"static/js/460.929a5eea.chunk.js","mappings":"4PAiEA,UA1Da,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,WAArC,eAAOG,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAavB,OAXA,iBAAC,8GAEqBC,EAAAA,EAAAA,GAAUV,EAASQ,GAFxC,OAESG,EAFT,OAGGP,EAAYO,GACZL,EAAU,YAJb,gDAMGM,QAAQC,MAAM,KAAMC,SACpBR,EAAU,YAPb,wDAAD,GAWO,WACLE,EAAWO,OACZ,CACF,GAAE,CAACf,IAEW,YAAXK,GAA6B,SAAC,IAAD,IAElB,aAAXA,GACK,SAAC,IAAD,CAAcS,QAAQ,gCAEhB,aAAXT,GAA6C,IAApBF,EAASa,QAC7B,6EAEM,aAAXX,GAEA,wBACGF,EAASc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACjCC,EAAK,yCAAqCH,GAEhD,OACE,2BACE,gBACEI,IAAKJ,EAAeG,EAAQE,EAC5BC,IAAKL,EACLM,MAAO,IACPC,OAAQ,OAEV,wBAAKP,KACL,uBACGC,EAAS,qBACQA,GADR,iCATLH,EAeZ,WAtBP,CAyBD,C,kFC9DYU,EAAUC,EAAAA,GAAAA,IAAH,0JASPC,EAAOD,EAAAA,GAAAA,EAAH,wG,mBCPJE,EAAe,SAAC,GAAiB,IAAfjB,EAAc,EAAdA,QAC7B,OACE,UAACc,EAAD,YACE,gBAAKL,IAAKS,EAAUP,IAAI,YAAYC,MAAM,WAC1C,SAACI,EAAD,UAAOhB,MAGZ,C,kMCTKmB,EAAe,+BACfC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6B3B,GAA7B,kFACC4B,EADD,UACUH,EADV,uBAECI,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQjC,EAAWiC,SARhB,cAMCC,EAND,yBAWEA,EAASC,KAAKC,SAXhB,kEAcA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAatC,GAAxC,kFACC4B,EADD,UACUH,EADV,iBAECI,EAAY,CAChBC,QAASJ,EACTa,MAAOD,GAJJ,SAOkBP,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQjC,EAAWiC,SAThB,cAOCC,EAPD,yBAYEA,EAASC,KAAKC,SAZhB,kEAeA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,WAAiC9B,EAAIV,GAArC,kFACC4B,EADD,UACUH,EADV,kBACgCf,GAC/BmB,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQjC,EAAWiC,SARhB,cAMCC,EAND,yBAWEA,EAASC,MAXX,kEAcA,SAAejC,EAAtB,iDAAO,OAAP,oBAAO,WAAyBQ,EAAIV,GAA7B,kFACC4B,EADD,UACUH,EADV,kBACgCf,EADhC,YAECmB,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQjC,EAAWiC,SARhB,cAMCC,EAND,yBAWEA,EAASC,KAAKM,MAXhB,kEAcA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA4BhC,EAAIV,GAAhC,kFACC4B,EADD,UACUH,EADV,kBACgCf,EADhC,YAECmB,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQjC,EAAWiC,SARhB,cAMCC,EAND,yBAWEA,EAASC,KAAKC,SAXhB,kE","sources":["components/MovieDetails/Cast/Cast.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notification } from 'components/Notification/Notification';\nimport noPhoto from '../../../images/no-photo.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castData, setCastData] = useState([]);\n  const [status, setStatus] = useState('pending');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      try {\n        const res = await fetchCast(movieId, controller);\n        setCastData(res);\n        setStatus('resolved');\n      } catch (error) {\n        console.error(error.message);\n        setStatus('rejected');\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  if (status === 'pending') return <Loader />;\n\n  if (status === 'rejected')\n    return <Notification message=\"Ooops, something went wrong\" />;\n\n  if (status === 'resolved' && castData.length === 0)\n    return <p>We don't have any cast information for this movie</p>;\n\n  if (status === 'resolved')\n    return (\n      <ul>\n        {castData.map(({ id, profile_path, name, character }) => {\n          const photo = `https://image.tmdb.org/t/p/w500${profile_path}`;\n\n          return (\n            <li key={id}>\n              <img\n                src={profile_path ? photo : noPhoto}\n                alt={name}\n                width={230}\n                height={345}\n              />\n              <h3>{name}</h3>\n              <p>\n                {character\n                  ? `Character: ${character}`\n                  : `Character is not specified`}\n              </p>\n            </li>\n          );\n        })}\n      </ul>\n    );\n};\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Text = styled.p`\n  font-size: 26px;\n  font-weight: 600;\n  text-align: center;\n  color: #777;\n`;\n","import PropTypes from 'prop-types';\nimport { Message, Text } from './Notification.styled';\nimport notFound from '../../images/notFound.jpg';\n\nexport const Notification = ({ message }) => {\n  return (\n    <Message>\n      <img src={notFound} alt=\"not found\" width=\"280px\" />\n      <Text>{message}</Text>\n    </Message>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '76d635679cabf189c0749ed5946c0835';\n\nexport async function fetchTrending(controller) {\n  const url = `${API_BASE_URL}/trending/movie/day`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovies(searchQuery, controller) {\n  const url = `${API_BASE_URL}/search/movie`;\n  const urlParams = {\n    api_key: API_KEY,\n    query: searchQuery,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data;\n}\n\nexport async function fetchCast(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/credits`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.cast;\n}\n\nexport async function fetchReviews(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/reviews`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n"],"names":["movieId","useParams","useState","castData","setCastData","status","setStatus","useEffect","controller","AbortController","fetchCast","res","console","error","message","abort","length","map","id","profile_path","name","character","photo","src","noPhoto","alt","width","height","Message","styled","Text","Notification","notFound","API_BASE_URL","API_KEY","fetchTrending","url","urlParams","api_key","axios","params","signal","response","data","results","fetchMovies","searchQuery","query","fetchMovieDetails","cast","fetchReviews"],"sourceRoot":""}