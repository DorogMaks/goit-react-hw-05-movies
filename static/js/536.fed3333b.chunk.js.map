{"version":3,"file":"static/js/536.fed3333b.chunk.js","mappings":"mPAmDA,UA7CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,WAArC,eAAOG,EAAP,KAAeC,EAAf,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBAavB,OAXA,iBAAC,8GAEqBC,EAAAA,EAAAA,IAAaV,EAASQ,GAF3C,OAESG,EAFT,OAGGP,EAAeO,GACfL,EAAU,YAJb,gDAMGM,QAAQC,MAAM,KAAMC,SACpBR,EAAU,YAPb,wDAAD,GAWO,WACLE,EAAWO,OACZ,CACF,GAAE,CAACf,IAEW,YAAXK,GAA6B,SAAC,IAAD,IAElB,aAAXA,GACK,SAAC,IAAD,CAAcS,QAAQ,gCAEhB,aAAXT,GAAgD,IAAvBF,EAAYa,QAChC,oEAEM,aAAXX,GAEA,wBACGF,EAAYc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,2BACE,0CAAgBD,MAChB,uBAAIC,MAFGF,EADM,WAHvB,CAWD,C,kFC/CYG,EAAUC,EAAAA,GAAAA,IAAH,0JASPC,EAAOD,EAAAA,GAAAA,EAAH,wG,mBCPJE,EAAe,SAAC,GAAiB,IAAfV,EAAc,EAAdA,QAC7B,OACE,UAACO,EAAD,YACE,gBAAKI,IAAKC,EAAUC,IAAI,YAAYC,MAAM,WAC1C,SAACL,EAAD,UAAOT,MAGZ,C,kMCTKe,EAAe,+BACfC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BvB,GAA7B,kFACCwB,EADD,UACUH,EADV,uBAECI,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQ7B,EAAW6B,SARhB,cAMCC,EAND,yBAWEA,EAASC,KAAKC,SAXhB,kEAcA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAalC,GAAxC,kFACCwB,EADD,UACUH,EADV,iBAECI,EAAY,CAChBC,QAASJ,EACTa,MAAOD,GAJJ,SAOkBP,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQ7B,EAAW6B,SAThB,cAOCC,EAPD,yBAYEA,EAASC,KAAKC,SAZhB,kEAeA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,WAAiC1B,EAAIV,GAArC,kFACCwB,EADD,UACUH,EADV,kBACgCX,GAC/Be,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQ7B,EAAW6B,SARhB,cAMCC,EAND,yBAWEA,EAASC,MAXX,kEAcA,SAAeM,EAAtB,iDAAO,OAAP,oBAAO,WAAyB3B,EAAIV,GAA7B,kFACCwB,EADD,UACUH,EADV,kBACgCX,EADhC,YAECe,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQ7B,EAAW6B,SARhB,cAMCC,EAND,yBAWEA,EAASC,KAAKO,MAXhB,kEAcA,SAAepC,EAAtB,iDAAO,OAAP,oBAAO,WAA4BQ,EAAIV,GAAhC,kFACCwB,EADD,UACUH,EADV,kBACgCX,EADhC,YAECe,EAAY,CAChBC,QAASJ,GAHN,SAMkBK,EAAAA,GAAAA,IAAUH,EAAK,CACpCI,OAAQH,EACRI,OAAQ7B,EAAW6B,SARhB,cAMCC,EAND,yBAWEA,EAASC,KAAKC,SAXhB,kE","sources":["components/MovieDetails/Reviews/Reviews.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notification } from 'components/Notification/Notification';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsData, setReviewsData] = useState([]);\n  const [status, setStatus] = useState('pending');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      try {\n        const res = await fetchReviews(movieId, controller);\n        setReviewsData(res);\n        setStatus('resolved');\n      } catch (error) {\n        console.error(error.message);\n        setStatus('rejected');\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  if (status === 'pending') return <Loader />;\n\n  if (status === 'rejected')\n    return <Notification message=\"Ooops, something went wrong\" />;\n\n  if (status === 'resolved' && reviewsData.length === 0)\n    return <p>We don't have any reviews for this movie</p>;\n\n  if (status === 'resolved')\n    return (\n      <ul>\n        {reviewsData.map(({ id, author, content }) => (\n          <li key={id}>\n            <h3>{`Author: ${author}`}</h3>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    );\n};\n\nexport default Reviews;\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Text = styled.p`\n  font-size: 26px;\n  font-weight: 600;\n  text-align: center;\n  color: #777;\n`;\n","import PropTypes from 'prop-types';\nimport { Message, Text } from './Notification.styled';\nimport notFound from '../../images/notFound.jpg';\n\nexport const Notification = ({ message }) => {\n  return (\n    <Message>\n      <img src={notFound} alt=\"not found\" width=\"280px\" />\n      <Text>{message}</Text>\n    </Message>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '76d635679cabf189c0749ed5946c0835';\n\nexport async function fetchTrending(controller) {\n  const url = `${API_BASE_URL}/trending/movie/day`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovies(searchQuery, controller) {\n  const url = `${API_BASE_URL}/search/movie`;\n  const urlParams = {\n    api_key: API_KEY,\n    query: searchQuery,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data;\n}\n\nexport async function fetchCast(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/credits`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.cast;\n}\n\nexport async function fetchReviews(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/reviews`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n"],"names":["movieId","useParams","useState","reviewsData","setReviewsData","status","setStatus","useEffect","controller","AbortController","fetchReviews","res","console","error","message","abort","length","map","id","author","content","Message","styled","Text","Notification","src","notFound","alt","width","API_BASE_URL","API_KEY","fetchTrending","url","urlParams","api_key","axios","params","signal","response","data","results","fetchMovies","searchQuery","query","fetchMovieDetails","fetchCast","cast"],"sourceRoot":""}