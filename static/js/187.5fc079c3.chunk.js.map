{"version":3,"file":"static/js/187.5fc079c3.chunk.js","mappings":"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","sources":["components/MoviesList/MovieLink/MovieLink.styled.js","components/MoviesList/MovieLink/MovieLink.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/Notification/Notification.jsx","components/Notification/Notification.styled.js","components/Shared/Section.styled.js","components/Shared/PageTitle.styled.js","pages/Home.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieItem = styled.li`\n  text-align: center;\n  background-color: rgb(238, 238, 238);\n  border: 1px solid rgb(204, 204, 204);\n  border-radius: 6px;\n  overflow: hidden;\n  transition: transform 250ms ease;\n\n  :hover,\n  :focus {\n    transform: scale(1.025);\n  }\n`;\n\nexport const MovieLinkStyled = styled(Link)`\n  display: block;\n  padding-bottom: 16px;\n  color: inherit;\n  font-weight: 600;\n  text-decoration: none;\n  transition: color 250ms ease;\n\n  :hover,\n  :focus {\n    color: rgb(34, 139, 34);\n  }\n`;\n\nexport const MovieImage = styled.img`\n  display: block;\n  margin-bottom: 16px;\n  background-color: rgb(255, 255, 255);\n  object-fit: cover;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport noPoster from 'images/no-poster.jpg';\nimport { MovieImage, MovieItem, MovieLinkStyled } from './MovieLink.styled';\n\nexport const MovieLink = ({ movieId, posterPath, title }) => {\n  const location = useLocation();\n  const movieLink = `/movies/${movieId}`;\n  const poster = `https://image.tmdb.org/t/p/w500${posterPath}`;\n\n  return (\n    <MovieItem>\n      <MovieLinkStyled to={movieLink} state={{ from: location }}>\n        <MovieImage src={posterPath ? poster : noPoster} alt={title} />\n        {title}\n      </MovieLinkStyled>\n    </MovieItem>\n  );\n};\n\nMovieLink.propTypes = {\n  movieId: PropTypes.number.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MoviesListStyled = styled.ul`\n  display: grid;\n  gap: 20px;\n  grid-template-columns: repeat(auto-fill, minmax(185px, 1fr));\n`;\n","import PropTypes from 'prop-types';\nimport { MovieLink } from './MovieLink/MovieLink';\nimport { MoviesListStyled } from './MoviesList.styled';\n\nexport const MoviesList = ({ moviesData }) => {\n  return (\n    <MoviesListStyled>\n      {moviesData.map(({ id, original_title, poster_path }) => (\n        <MovieLink\n          key={id}\n          movieId={id}\n          posterPath={poster_path}\n          title={original_title}\n        />\n      ))}\n    </MoviesListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  moviesData: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Message, NotificationText } from './Notification.styled';\nimport notFound from 'images/notFound.jpg';\n\nexport const Notification = ({ message }) => {\n  return (\n    <Message>\n      <img src={notFound} alt=\"not found\" width=\"280px\" />\n      <NotificationText>{message}</NotificationText>\n    </Message>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Message = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const NotificationText = styled.p`\n  padding: 32px 0px;\n  font-size: 26px;\n  font-weight: 600;\n  text-align: center;\n  color: #777;\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  width: 100%;\n  padding: 16px 0px;\n`;\n","import styled from 'styled-components';\n\nexport const PageTitle = styled.h2`\n  padding: 16px 0px 32px;\n  font-size: 22px;\n  text-align: center;\n  text-transform: uppercase;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchTrending } from 'services/api';\nimport { Section } from 'components/Shared/Section.styled';\nimport { Container } from 'components/Shared/Container.styled';\nimport { PageTitle } from 'components/Shared/PageTitle.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Notification } from 'components/Notification/Notification';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('pending');\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    (async () => {\n      try {\n        const res = await fetchTrending(controller);\n        setMovies(res);\n        setStatus('resolved');\n      } catch (error) {\n        console.error(error.message);\n        setStatus('rejected');\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return (\n    <Section>\n      <Container>\n        <PageTitle>Trending today</PageTitle>\n        {status === 'pending' && <Loader />}\n        {status === 'rejected' && (\n          <Notification message=\"Ooops, something went wrong\" />\n        )}\n        {status === 'resolved' && <MoviesList moviesData={movies} />}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '76d635679cabf189c0749ed5946c0835';\n\nexport async function fetchTrending(controller) {\n  const url = `${API_BASE_URL}/trending/movie/day`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovies(searchQuery, controller) {\n  const url = `${API_BASE_URL}/search/movie`;\n  const urlParams = {\n    api_key: API_KEY,\n    query: searchQuery,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data;\n}\n\nexport async function fetchCast(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/credits`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.cast;\n}\n\nexport async function fetchReviews(id, controller) {\n  const url = `${API_BASE_URL}/movie/${id}/reviews`;\n  const urlParams = {\n    api_key: API_KEY,\n  };\n\n  const response = await axios.get(url, {\n    params: urlParams,\n    signal: controller.signal,\n  });\n\n  return response.data.results;\n}\n"],"names":["MovieItem","styled","MovieLinkStyled","Link","MovieImage","MovieLink","movieId","posterPath","title","location","useLocation","movieLink","poster","to","state","from","src","noPoster","alt","MoviesListStyled","MoviesList","moviesData","map","id","original_title","poster_path","Notification","message","notFound","width","Message","NotificationText","Section","PageTitle","useState","movies","setMovies","status","setStatus","useEffect","controller","AbortController","fetchTrending","res","console","error","abort","Loader","API_BASE_URL","API_KEY","url","urlParams","api_key","axios","params","signal","response","data","results","fetchMovies","searchQuery","query","fetchMovieDetails","fetchCast","cast","fetchReviews"],"sourceRoot":""}